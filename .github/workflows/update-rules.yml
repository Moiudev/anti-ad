name: Update Rules

on:
  schedule:   # 设置定时任务，每 2 小时运行一次
    - cron: "0 */2 * * *"

  workflow_dispatch:   # 允许手动触发，可在 GitHub 界面手动运行工作流

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      PYTHONUNBUFFERED: 1  # 实时输出 Python 日志

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录
        token: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub 令牌进行认证

    # 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    # 缓存依赖
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ${{ github.workspace }}/hash_cache.json
        key: ${{ runner.os }}-py-${{ hashFiles('scripts/requirements.txt') }}

    # 安装 Python 依赖
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r scripts/requirements.txt

    # 运行处理脚本，用于生成 anti-ad.json
    - name: Run processing script
      run: python scripts/process.py

    # 下载 sing-box 工具
    - name: Download sing-box
      run: |
        # 通过 GitHub API 获取 sing-box 最新版本号
        LATEST_VERSION=$(curl -sL "https://api.github.com/repos/SagerNet/sing-box/releases/latest" | jq -r '.tag_name' | sed 's/v//')

        # 下载最新版本的 sing-box
        wget "https://github.com/SagerNet/sing-box/releases/download/v${LATEST_VERSION}/sing-box-${LATEST_VERSION}-linux-amd64.tar.gz"

        # 解压下载的文件
        tar -xzf sing-box-${LATEST_VERSION}-linux-amd64.tar.gz

        # 移动 sing-box 可执行文件到当前目录
        mv sing-box-${LATEST_VERSION}-linux-amd64/sing-box .

        # 清理临时文件和目录
        rm -r sing-box-${LATEST_VERSION}-linux-amd64*

    # 编译规则集
    - name: Compile rule set
      run: |
        # 添加执行权限
        chmod +x sing-box

        # 编译 JSON 规则集为 SRS 格式
        ./sing-box rule-set compile --output ad.srs ad.json

    #  检查是否有变更
    - name: Check for changes
      id: check-changes
      run: |
        # 使用 git add -N 将未跟踪文件标记为"待添加"状态
        git add -N .

        # 检查工作区是否有变更
        if ! git diff --quiet; then
          # 检测到变更：设置输出变量 changes_detected=true
          echo "changes_detected=true" >> $GITHUB_OUTPUT
          echo "✅ 检测到变更，将提交更新"
        else
          # 没有变更：设置输出变量changes_detected=false
          echo "changes_detected=false" >> $GITHUB_OUTPUT
          echo "ℹ️ 未检测到变更，跳过提交"
        fi

    # 提交并推送变更，仅在检测到变更时执行
    - name: Commit and push changes
      if: steps.check-changes.outputs.changes_detected == 'true'
      run: |
        # 配置 Git 用户信息，使用 GitHub Actions 默认身份
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        # 添加变更文件：
        #   ad.srs - 编译后的规则集
        #   ad.json - 原始规则集
        #   rules/* - 下载的规则源文件
        git add ad.srs ad.json rules/* hash_cache.json

        # 获取当前北京时间，用于提交信息
        TIMESTAMP=$(TZ="Asia/Shanghai" date +"%Y-%m-%d %H:%M")

        # 提交变更
        git commit -m "规则更新于 $TIMESTAMP"

        # 推送变更到当前分支
        git push

        echo "🚀 变更已提交并推送！"
